{"version":3,"file":"static/webpack/static/development/pages/publication.js.c5d2bf26793efdae0cfb.hot-update.js","sources":["webpack:///./pages/detail.js"],"sourcesContent":["import React from 'react'\nimport _ from 'lodash'\n\nclass Detail extends React.Component {\n  constructor(props) {\n    super(props)\n\n    if (!this.props.publication) return\n\n    this.publication = Object.assign({}, this.props.publication)\n    this.people = Object.assign([], this.props.people)\n    this.namesId = Object.assign({}, this.props.namesId)\n\n    this.names = this.people.map((person) => person.name )\n    if (this.publication.base) {\n      this.publication.id = this.publication.base.split('.json')[0]\n    }\n    this.getProceedings()\n    this.getVideoEmbed()\n\n\n    this.showFigures = false\n    if (!this.props.short) {\n      this.getFigures()\n      if (this.figures[this.publication.id]) {\n        this.showFigures = true\n      }\n    }\n  }\n\n  getProceedings() {\n    const conference = this.publication.series.slice(0, -5)\n    const year = this.publication.series.slice(-2)\n    this.proceeding = this.props.booktitles[conference]\n    if (!this.proceeding) {\n      this.proceeding = {}\n    }\n    this.proceeding.series = `${conference} '${year}`\n    if (this.publication.pages < 4) {\n      this.proceeding.booktitle = 'Adjunct ' + this.proceeding.booktitle\n    }\n  }\n\n  getVideoEmbed() {\n    if (this.publication.video) {\n      if (this.publication.video.includes('youtube')) {\n        this.publication.embedId = this.publication.video.split('?v=')[1]\n        this.publication.embed = `https://www.youtube.com/embed/${this.publication.embedId}`\n        this.publication.embedThumbnail = `https://img.youtube.com/vi/${this.publication.embedId}/maxresdefault.jpg`\n      }\n      if (this.publication.video.includes('vimeo')) {\n        this.publication.embedId = this.publication.video.split('/')[3]\n        this.publication.embed = `https://player.vimeo.com/video/${this.publication.embedId}`\n        this.publication.embedThumbnail = this.props.vimeo[this.publication.embedId]\n      }\n    }\n\n    if (this.publication.talk) {\n      if (this.publication.talk.includes('youtube')) {\n        this.publication.talkEmbedId = this.publication.talk.split('?v=')[1]\n        this.publication.talkEmbed = `https://www.youtube.com/embed/${this.publication.talkEmbedId}`\n        this.publication.talkEmbedThumbnail = `https://img.youtube.com/vi/${this.publication.talkEmbedId}/maxresdefault.jpg`\n      }\n      if (this.publication.talk.includes('vimeo')) {\n        this.publication.talkEmbedId = this.publication.talk.split('/')[3]\n        this.publication.talkEmbed = `https://player.vimeo.com/video/${this.publication.talkEmbedId}`\n        this.publication.talkEmbedThumbnail = this.props.vimeo[this.publication.talkEmbedId]\n      }\n    }\n  }\n\n  getFigures() {\n    const dirs =\n    this.props.files.children\n    .filter(dir => dir.name === 'images')[0].children\n    .filter(dir => dir.name === 'publications')[0].children\n    .filter(dir => dir.name === 'figures')[0].children\n\n    this.figures = {}\n    for (let dir of dirs) {\n      let id = dir.name\n      let files = dir.children.map(file => file.path )\n      this.figures[id] = files\n    }\n  }\n\n  render() {\n    if (!this.props.publication) {\n      return <div></div>\n    }\n\n    return (\n      <div id=\"publication\">\n        <div className=\"block\">\n          <div id=\"breadcrumb\" className=\"ui breadcrumb\">\n            <a className=\"section\" href=\"/publications\">Publications</a>\n            <i className=\"right angle icon divider\"></i>\n            <a className=\"active section\">{ this.publication.series }</a>\n          </div>\n\n                  <a href={ `/publications/${publication.id}` } target=\"_blank\">\n                    <i className=\"fas fa-link fa-fw\"></i>{`${publication.id}`}\n                  </a>\n                  &nbsp;&nbsp;-&nbsp;&nbsp;\n                  <a href={ `/static/publications/${publication.id}.pdf` } target=\"_blank\">\n                    <i className=\"far fa-file-pdf fa-fw\"></i> pdf\n                  </a>\n                  <div className=\"actions\" style={{ float: 'right', cursor: 'pointer', color: 'grey' }}>\n                    <i className=\"ui right cancel close icon\">\n                    </i>\n                  </div>\n\n          <div className=\"ui stackable grid\" style={{ marginTop: '10px' }}>\n            <div className=\"three wide column\" style={{ margin: 'auto' }}>\n              <img className=\"cover\" src={ `/static/images/publications/cover/${ this.publication.id }.jpg` } />\n            </div>\n            <div className=\"thirteen wide column\">\n              { this.props.short &&\n                <h1>\n                  <a href={ `/publications/${this.publication.id}` } target=\"_blank\">{ this.publication.title }</a>\n                </h1>\n              }\n              { !this.props.short &&\n                <h1>{ this.publication.title }</h1>\n              }\n              <p className=\"meta\">\n                { this.publication.authors.map((author) => {\n                    return (\n                      this.names.includes(author) ?\n                      <a href={ `/people/${ this.namesId[author] }` } key={ author }>\n                        <img src={ `/static/images/people/${ this.namesId[author] }.jpg`} className=\"ui circular spaced image mini-profile\" />\n                        <strong>{author}</strong>\n                      </a>\n                      :\n                      <span key={ author }>{author}</span>\n                    )\n                  }).reduce((prev, current) => [prev, ' , ', current])\n                }\n              </p>\n            </div>\n          </div>\n        </div>\n        { this.publication.embed &&\n          <div className=\"block\">\n            <div className=\"video-container\">\n              <iframe\n                className=\"embed\"\n                width=\"100%\"\n                height=\"315\"\n                src={`${this.publication.embed}`}\n                srcDoc={`<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=${this.publication.embed}?autoplay=1><img src=${this.publication.embedThumbnail}><span>▶</span></a>`}\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen={true}\n                mozallowfullscreen=\"true\"\n                msallowfullscreen=\"true\"\n                oallowfullscreen=\"true\"\n                webkitallowfullscreen=\"true\"\n              ></iframe>\n            </div>\n          </div>\n        }\n        <div className=\"block\">\n          <h1>Abstract</h1>\n          <p>{ this.publication.abstract }</p>\n\n          { this.publication.keywords &&\n            <div className=\"ui large basic labels\">\n              Keywords: &nbsp;\n              { this.publication.keywords.split(', ').map((keyword) => {\n                return <span className=\"ui brown basic label\" key={ keyword }>{ _.startCase(keyword) }</span>\n              }) }\n            </div>\n          }\n        </div>\n        <div className=\"block\">\n          <h1>Reference</h1>\n          <div className=\"ui segment\">\n            <p style={{ lineHeight: \"160%\" }}>\n              { this.publication.authors.reduce((prev, current) => [prev, ', ', current]) }.&nbsp;\n              <b>{ this.publication.title }</b>.&nbsp;\n              <i>{ `In ${this.proceeding.booktitle} (${ this.proceeding.series })`  }</i>.&nbsp;\n              { this.proceeding.publisher }&nbsp;\n              Page: 1-{ this.publication.pages }.&nbsp;\n              DOI: <a href={ this.publication.doi} target=\"_blank\">{ this.publication.doi }</a>\n            </p>\n          </div>\n        </div>\n        { this.publication.talkEmbed &&\n          <div className=\"block\">\n            <h1>Talk</h1>\n            <div className=\"video-container\">\n              <iframe\n                className=\"embed\"\n                width=\"100%\"\n                height=\"315\"\n                src={`${this.publication.talkEmbed}`}\n                srcDoc={`<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=${this.publication.talkEmbed}?autoplay=1><img src=${this.publication.talkEmbedThumbnail}><span>▶</span></a>`}\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen={true}\n                mozallowfullscreen=\"true\"\n                msallowfullscreen=\"true\"\n                oallowfullscreen=\"true\"\n                webkitallowfullscreen=\"true\"\n              ></iframe>\n            </div>\n          </div>\n        }\n        { this.showFigures &&\n          <div className=\"block\">\n            <h1>Figures</h1>\n            <div id=\"figure\">\n              <div className=\"ui stackable three cards\" style={{ marginTop: '30px' }}>\n                { this.figures[this.publication.id].map((src) => {\n                  return (\n                    <a className=\"card\" href={ `/${src}` } target=\"_blank\" >\n                      <div className=\"image\">\n                        <img src={ `/${src}` } />\n                      </div>\n                    </a>\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n        }\n      </div>\n    )\n  }\n\n}\n\nexport default Detail\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAxBA;AAwBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AARA;AAAA;AACA;AADA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAaA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAiBA;AAAA;AAKA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAKA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAkBA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAOA;;;;AAlOA;AACA;AAqOA;;;;A","sourceRoot":""}