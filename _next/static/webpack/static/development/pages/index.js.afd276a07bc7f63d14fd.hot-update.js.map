{"version":3,"file":"static/webpack/static/development/pages/index.js.afd276a07bc7f63d14fd.hot-update.js","sources":["webpack:///./pages/people.js"],"sourcesContent":["import React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport summary from '../content/output/summary.json'\n\nlet types = [\n  { key: 'faculty', title: 'Faculty' },\n  { key: 'postdoc', title: 'Post Docs' },\n  { key: 'phd', title: 'PhD Students' },\n  { key: 'master', title: 'Masters Students' },\n  { key: 'undergrad', title: 'Undergrad Students'},\n  { key: 'visiting', title: 'Visiting Researchers' },\n  { key: 'alumni', title: 'Alumni' }\n]\n\nlet fileNames = Object.keys(summary.fileMap)\nlet keys = fileNames.filter((fileName) => {\n  return fileName.includes('people')\n})\n\nlet people = []\nfor (let key of keys) {\n  let id = key.split('/')[3].replace('.json', '')\n  let person = Object.assign(summary.fileMap[key], { id: id })\n  people.push(person)\n}\n\nclass People extends React.Component {\n  componentDidMount() {\n  }\n\n  getTitle(person) {\n    if (person.title) return person\n    switch (person.type) {\n      case 'postdoc':\n        person.title = 'Postdocotral Fellow'\n        break\n      case 'phd':\n        person.title = 'PhD Student'\n        break\n      case 'master':\n        person.title = 'MSc Student'\n        break\n      case 'undergrad':\n        person.title = 'Undergraduate Student'\n        break\n      case 'visiting':\n        person.title = 'Visiting Researcher'\n        break\n      case 'alumni':\n        switch (person.past) {\n          case 'postdoc':\n            person.title = 'Alumni (PostDoc)'\n            break\n          case 'phd':\n            person.title = 'Alumni (PhD)'\n            break\n          case 'master':\n            person.title = 'Alumni (MSc)'\n            break\n          case 'undergrad':\n            person.title = 'Alumni (Undergrad)'\n            break\n          case 'visiting':\n            person.title = 'Alumni (Visiting)'\n            break\n        }\n        break\n    }\n    return person\n  }\n\n  render() {\n    if (this.props.short) {\n      types = types.slice(0, 4)\n      // types.splice(4, 2)\n    }\n    return (\n      <div id=\"people\" className=\"category\">\n        <title>People - Interactions Lab | University of Calgary</title>\n\n        <h1 className=\"ui horizontal divider header\">\n          <i className=\"child icon\"></i>\n          People\n        </h1>\n        { types.map((type) => {\n          return (\n            <div className=\"people-category\" key={ type.title }>\n              <h2>{ type.title }</h2>\n              <div className=\"ui grid\">\n                { people\n                  .filter((person) => {\n                    return person.type === type.key\n                  }) // filter\n                  .map((person) => {\n                    person = this.getTitle(person)\n                    return (\n                      <a className=\"four wide column person\" href={ `/people/${ person.id }` } key={ person.id }>\n                        <img className=\"ui circular image medium-profile\" src={ `/static/images/people/${ person.id }.jpg`}/>\n                        <p><b>{ person.name }</b></p>\n                        <p>\n                          { person.title }\n                          { person.now &&\n                            <span><br/>{ person.now }</span>\n                          }\n                        </p>\n                      </a>\n                    ) // return\n                  }) // map\n                }\n              </div>\n            </div>\n          )\n        })}\n        { this.props.short &&\n          <div className=\"ui vertical segment stackable\" style={{ textAlign: 'center' }}>\n            <a className=\"ui button\" href=\"/people\">\n              + see more members\n            </a>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default People\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;;;;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;AAEA;;;;;;;;;;;;;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAfA;AACA;AAgBA;AAlCA;AACA;AAmCA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AAnBA;AAwBA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAOA;;;;AAhGA;AACA;AAkGA;;;;A","sourceRoot":""}